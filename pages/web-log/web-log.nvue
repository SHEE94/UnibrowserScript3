<template>
	<view class="content">
		<view class="bar">
			<!-- <navigator url="/pages/override-resource-log/override-resource-log">{{$t('weblog.override-resource')}}</navigator> -->
		</view>
		<view class="pick">
			<picker mode="selector" :range="range" @change="bindChange">
				<view>{{ range[current] }} <text class="iconfont icon-down" style="margin-left: 20upx;"></text></view>
			</picker>
		</view>
		<view v-for="(item, index) in showRes" :key="index" class="list" :data-index="index" @tap="change"
			@longpress="longchange">
			<view style="color: #cc6666;">{{$t('weblog.type')}}：{{ item.type }}</view>
			<text class="desc">{{ item.url }}</text>
		</view>
	</view>
</template>

<script>
	import {
		initVueI18n,
		I18n
	} from '@dcloudio/uni-i18n'
	import messages from '@/locale/index'

	const {
		t,
		setLocale
	} = initVueI18n(messages)
	const app = getApp();
	const settingConfig = app.globalData.webview.Setting.settingConfig;
	setLocale(settingConfig.language[settingConfig.langCurrnt].code);
	export default {
		data() {
			return {
				range: ['all', 'js', 'css', 'img', 'iframe', 'video'],
				current: 0,
				showRes: [],
				allRes: [],
				devList: [],

				initResArr: {
					js: [],
					css: [],
					img: [],
					iframe: [],
					video: []
				},
			};
		},
		created() {
			this.webview = app.globalData.webview;
			this.allRes = this.webview.allRes;
			this.Resource = this.webview.getRES();
			this.showAll();
		},
		mounted() {
			this.settingConfig = this.webview.Setting.settingConfig || {};
		},
		methods: {
			$t: t,
			bindChange(e) {
				this.current = e.detail.value;
				let _type = this.range[this.current];
				if (this.Resource.hasOwnProperty(_type)) {
					this.showRes = this.Resource[_type];
				} else {
					this.showAll();
				}
			},
			change(e) {

				let index = e.currentTarget.dataset.index;
				if (this.current == 5) {
					// #ifdef APP
					if (this.settingConfig.videoPLay || uni.getSystemInfoSync().osName == 'android') {
						var Intent = plus.android.importClass("android.content.Intent");
						var Uri = plus.android.importClass("android.net.Uri");
						var main = plus.android.runtimeMainActivity();
						var intent = new Intent(Intent.ACTION_VIEW);
						var uri = Uri.parse(this.showRes[index].url);
						intent.setDataAndType(uri, "video/*");
						main.startActivity(intent);
					}
					// #endif
					if (uni.getSystemInfoSync().osName == 'ios') {
						plus.runtime.openURL(this.showRes[index].url)
					}
					return;
				}
				uni.navigateTo({
					url: '/pages/test-webview/test-webview?url=' + this.showRes[index].url
				});
			},
			convertTemp(the_url) {
				let first_split = the_url.split('//');

				let xx = first_split[0];
				let without_resource = first_split[1];

				let second_split = without_resource.split('/');

				let domain = second_split[0];

				return xx + '//' + domain;
			},
			longchange(e) {
				let index = e.currentTarget.dataset.index;
				uni.showActionSheet({
					itemList: [this.$t('weblog.itemList.0'), this.$t('weblog.itemList.1'), this.$t(
						'weblog.itemList.2'), this.$t('weblog.itemList.3'), this.$t('weblog.itemList.4')],
					success: res => {
						let resRequest = []
						switch (res.tapIndex) {
							case 0:
								resRequest = uni.getStorageSync('overrideResourceRequest') || [];
								resRequest.unshift(this.showRes[index].url);
								uni.setStorageSync('overrideResourceRequest', resRequest);
								break;
							case 1:
								resRequest = uni.getStorageSync('overrideResourceRequestHost') || [];
								let hostname = this.convertTemp(this.showRes[index].url);
								resRequest.unshift(hostname);
								uni.setStorageSync('overrideResourceRequestHost', resRequest);
								break;
							case 2:
								uni.setClipboardData({
									data: this.showRes[index].url
								});
								break;
							case 3:
								this.createDownload(this.showRes[index].url);
								break;
							case 4:
								const Dlan = uni.requireNativePlugin('JX-Dlna');
								Dlan.search(result => {

									if (result.type === 'add') {
										this.devList.push({
											'id': result.id,
											'name': result.name
										})
									} else {
										this.devList = this.devList.filter(x => x.id != result.id)
									}
									// let itemList = []

									// itemList.push()
									// uni.showActionSheet({
									// 	itemList:[]
									// })
								})
								break;
						}


					}
				});
			},
			createDownload(url) {
				uni.showLoading({
					title: this.$t('weblog.tips.1')
				})
				

				var dtask = plus.downloader.createDownload(url, {
					filename: '_downloads/'
				}, function(d, status) {
					// 下载完成
					uni.hideLoading()
					if (status == 200) {
						uni.showModal({
							content: this.$t('weblog.tips.2') + d.filename
						});
					} else {
						uni.showModal({
							content: this.$t('weblog.tips.3')
						});
						console.log('Download failed: ' + status);
					}
				});

				dtask.start();

			},
			showAll() {
				if (!this.Resource) return;
				this.showRes = [...this.Resource.js, ...this.Resource.css, ...this.Resource.img, ...this.Resource.iframe,
					...this.Resource.video
				];
			}
		},
		onLoad() {
			// this.Resource = app.globalData.LoadResource||{ js: [], css: [], img: [], iframe: [], video: [] };

		}
	};
</script>

<style lang="less">
	.content {
		padding: 15px;
	}

	.header {
		display: flex;
		flex-direction: row-reverse;

		.navi {
			border: 1px solid #ECAD9E;
			padding: 5px 7px;
			margin-bottom: 15px;
		}
	}

	.pick {
		position: fixed;
		border-radius: 5px;
		top: 0;
		background-color: #ffffff;
		left: 15px;
		right: 15px;
		padding: 0 15px;
		border: 1px solid #515151;
		text-align: center;
	}

	.list {

		border-bottom: 1px solid #eeeeee;
		padding: 7px 0;
		overflow: hidden;
		text-overflow: ellipsis;
		.desc{
			font-size: 14px;
			color: #666666;
		}
	}

	.bar {
		padding: 7px 25px;
		margin-bottom: 15px;
		display: flex;
		justify-content: flex-end;
		box-sizing: border-box;

	}
</style>