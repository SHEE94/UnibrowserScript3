<template>
	<view class="menu-content">

		<view class="list-content">
			<view class="url-text" v-if="href && href != 'undefined'"><text class="color999">{{href}}</text></view>
			<template v-if="href && href != 'undefined'">
				<view class="btn" @click="menuChange(ACTION_TYPE.openBg,href)">
					<text class="label">{{$t("menu.background.open")}}</text>
				</view>
				<view class="btn" @click="menuChange(ACTION_TYPE.openNew,href)"><text
						class="label">{{$t("menu.new.open")}}</text>
				</view>
				<view class="btn" @click="menuChange(ACTION_TYPE.copyLink,href)"><text
						class="label">{{$t("menu.copy.link")}}</text>
				</view>
				<view class="btn" @click="menuChange(ACTION_TYPE.overrLink,href)"><text
						class="label">{{$t("menu.inter.link")}}</text>
				</view>
				<view class="btn" @click="menuChange(ACTION_TYPE.adurl)"><text
						class="label">{{$t("menu.inter.website")}}</text>
				</view>
				<view class="btn" @click="menuChange(ACTION_TYPE.copyText)"><text
						class="label">{{$t("menu.copy.link.text")}}</text>
				</view>
			</template>
			<template v-if="src && src != 'undefined'">
				<view class="btn" @click="menuChange(ACTION_TYPE.saveImg)"><text
						class="label">{{$t("menu.save.img")}}</text></view>
				<view class="btn" @click="menuChange(ACTION_TYPE.preview)"><text
						class="label">{{$t("menu.preivew.img")}}</text>
				</view>
				<view class="btn" @click="menuChange(ACTION_TYPE.copyImgLink,src)"><text
						class="label">{{$t("menu.copy.img")}}</text>
				</view>
				<view v-if="tag == 'VIDEO'" class="btn" @click="menuChange(ACTION_TYPE.openVideo,src)">
					<text class="label">{{$t("menu.open.play")}}</text>
				</view>
				<view v-if="tag == 'IFRAME'" class="btn" @click="menuChange(ACTION_TYPE.openIframe,src)">
					<text class="label">{{$t("menu.open.iframe")}}</text>
				</view>
			</template>

			<view class="btn" v-if="text && text != 'undefined'" @click="menuChange(ACTION_TYPE.copyChangeText)">
				<text class="label">{{$t("menu.copy.text")}}</text>
			</view>
			<view class="btn" @click="menuChange(ACTION_TYPE.ad)"><text class="label">{{$t("menu.ad")}}</text></view>
			<view class="btn" @click="menuChange(ACTION_TYPE.webapp)"><text
					class="label">{{$t("menu.installwebapp")}}</text></view>
			<view class="btn" v-for="item in GM_MENU" :key="item.id" @click="changeGM(item)">
				<text class="label">{{ item.title }}</text>
			</view>

		</view>


	</view>
</template>

<script>
	import {
		initVueI18n,
		I18n
	} from '@dcloudio/uni-i18n'
	import messages from '@/locale/index'
	
	const {
		t,
		setLocale
	} = initVueI18n(messages)
	const app = getApp()
	export default {
		name: 'menu-call',
		props: ['tag', 'src', 'text', 'className', 'href', 'hostname'],
		data() {
			return {
				ACTION_TYPE: {
					openBg: 0,
					openNew: 1,
					copyLink: 2,
					overrLink: 3,
					adurl: 4,
					copyText: 5,
					saveImg: 6,
					preview: 7,
					copyImgLink: 8,
					openVideo: 9,
					copyChangeText: 10,
					ad: 11,
					webapp: 12,
					openIframe: 13,
				},
				webview: null,
				GM_MENU: []
			};
		},
		watch: {
			tag(val) {
				console.log(val)
			}
		},
		created() {
			let webview = app.globalData.webview;
			const settingConfig = app.globalData.webview.Setting.settingConfig;
			setLocale(settingConfig.language[settingConfig.langCurrnt].code);
			webview.state.getData('GM_MENU', (GM_MENU) => {
				this.GM_MENU = GM_MENU;
			})
		},

		methods: {
			$t: t,
			clipText(text) {
				uni.setClipboardData({
					data: text,
					success: (res) => {
						plus.nativeUI.toast(this.$t("menu.copy.clip"));
					}
				})
			},
			menuChange(str, url) {
				switch (str) {
					case this.ACTION_TYPE.openBg:
						app.globalData.webview.openBGWindow(url)
						break;
					case this.ACTION_TYPE.openNew:
						app.globalData.webview.openNewWindow(this.href)
						break;
					case this.ACTION_TYPE.copyImgLink:
						this.clipText(this.src)
						break;
					case this.ACTION_TYPE.copyLink:
						this.clipText(this.href)
						break;
					case this.ACTION_TYPE.overrLink:
						app.globalData.webview.AD.addBlackAD(url)
						break;
					case this.ACTION_TYPE.copyText:
						this.clipText(this.text)
						break;
					case this.ACTION_TYPE.saveImg:
						uni.downloadFile({
							url: this.src,
							success: (res) => {
								let path = res.tempFilePath;
								uni.saveImageToPhotosAlbum({
									filePath: path,
									success: (res) => {
										plus.nativeUI.toast(this.$t("menu.tips.1"));
									},
									fail: (res) => {
										plus.nativeUI.toast(this.$t("menu.tips.2"));
										uni.saveFile({
											tempFilePath: path,
											success: (res) => {
												plus.nativeUI.toast(this.$t(
														"menu.tips.3") + 'ï¼š' + res
													.savedFilePath);
											}
										})
									}
								})

							}
						})
						break;
					case this.ACTION_TYPE.preview:
						uni.previewImage({
							urls: [this.src]
						})
						break;
					case this.ACTION_TYPE.copyChangeText:
						this.clipText(this.text)
						break;
					case this.ACTION_TYPE.openVideo:
						this.openSysVideo(this.src)
						break;

					case this.ACTION_TYPE.openIframe:
						app.globalData.webview.openNewWindow(this.src)
						break;
					case this.ACTION_TYPE.ad:
						let webview = app.globalData.webview;
						this.className.split(' ').forEach(className => {
							webview.AD.addClassAD(className)
						})

						webview.activeWebview.evalJS(webview.AD.injectClearADCode())
						break;
					case this.ACTION_TYPE.adurl:
						if (this.href) {
							let hostarr = this.href.split('.');
							app.globalData.webview.AD.addBlackAD(hostarr[1])
						}
						break;
					case this.ACTION_TYPE.webapp:
						app.globalData.webview.installWebapp()
						break;
				}
				this.close()
			},
			close() {

				this.$emit('close')
			},
			closeScroll() {
				console.log('closeScroll')
			},
			openSysVideo(src) {
				var Intent = plus.android.importClass("android.content.Intent");
				var Uri = plus.android.importClass("android.net.Uri");
				var main = plus.android.runtimeMainActivity();
				var intent = new Intent(Intent.ACTION_VIEW);
				var uri = Uri.parse(src);
				intent.setDataAndType(uri, "video/*");
				main.startActivity(intent);
			},
			changeGM(item) {
				app.globalData.webview.ScriptExtension.clickExtensionMenu(item)
			}
		}
	};
</script>

<style lang="less">
	.menu-content {

		display: flex;
		justify-content: center;
		align-items: center;
		position: fixed;
		left: 0;
		right: 0;
		bottom: 0;
		top: 0;
		background: rgba(0, 0, 0, .5);

		.scroll-view {
			flex: 1;
			align-items: center;
			justify-content: center;
			background-color: #999;
			position: relative;
		}

		.list-content {

			width: 240px;
			background: #ffffff;
			padding: 15px;
			border-radius: 15px;
			box-shadow: 0 0 20px 0px #313131;
			flex-direction: column;
			border: 1px solid #eeeeee;
			.color555 {
				color: #515151;
			}

			.color999 {
				font-size: 12px;
				color: #999;
				overflow: hidden;
				text-overflow: ellipsis;
				height: 16px;
			}

			.url-text {

				color: #999;
				overflow: hidden;
				text-overflow: ellipsis;
				height: 24px;
			}

			.btn {
				padding:7px 0px;
				.label{
					color: #515151;
					font-size: 14px;
					font-weight: 700;
				}
			}
		}
	}
</style>